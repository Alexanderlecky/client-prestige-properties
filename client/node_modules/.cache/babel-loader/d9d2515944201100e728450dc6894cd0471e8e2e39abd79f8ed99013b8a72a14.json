{"ast":null,"code":"var _jsxFileName = \"/home/alexander/Development/code/code/phase-4/Prestige-Properties/client/src/components/PropertyList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PropertyList = () => {\n  _s();\n  const [properties, setProperties] = useState([]);\n\n  // Fetch the properties from the backend when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/properties') // Adjust URL if needed\n    .then(response => response.json()).then(data => {\n      setProperties(data); // Set the properties from the backend\n    }).catch(error => {\n      console.error('Error fetching properties:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"property-list\",\n    children: properties.map(property => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"property-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: property.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: property.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"$\", property.price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: property.image // This should be the public URL to the image\n        ,\n        alt: property.name,\n        style: {\n          width: \"300px\",\n          height: \"200px\",\n          objectFit: \"cover\"\n        } // Adjust size as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)]\n    }, property.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(PropertyList, \"cpCUGR83xowmuASw1agY8N9Ptf8=\");\n_c = PropertyList;\nexport default PropertyList;\nvar _c;\n$RefreshReg$(_c, \"PropertyList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PropertyList","_s","properties","setProperties","fetch","then","response","json","data","catch","error","console","className","children","map","property","name","fileName","_jsxFileName","lineNumber","columnNumber","location","price","src","image","alt","style","width","height","objectFit","id","_c","$RefreshReg$"],"sources":["/home/alexander/Development/code/code/phase-4/Prestige-Properties/client/src/components/PropertyList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst PropertyList = () => {\n  const [properties, setProperties] = useState([]);\n\n  // Fetch the properties from the backend when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:5000/properties') // Adjust URL if needed\n      .then((response) => response.json())\n      .then((data) => {\n        setProperties(data); // Set the properties from the backend\n      })\n      .catch((error) => {\n        console.error('Error fetching properties:', error);\n      });\n  }, []);\n\n  return (\n    <div className=\"property-list\">\n      {/* Display the properties */}\n      {properties.map((property) => (\n        <div key={property.id} className=\"property-item\">\n          <h2>{property.name}</h2>\n          <p>{property.location}</p>\n          <p>${property.price}</p>\n          <img\n            src={property.image} // This should be the public URL to the image\n            alt={property.name}\n            style={{ width: \"300px\", height: \"200px\", objectFit: \"cover\" }} // Adjust size as needed\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PropertyList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,kCAAkC,CAAC,CAAC;IAAA,CACvCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdL,aAAa,CAACK,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAKa,SAAS,EAAC,eAAe;IAAAC,QAAA,EAE3BX,UAAU,CAACY,GAAG,CAAEC,QAAQ,iBACvBhB,OAAA;MAAuBa,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC9Cd,OAAA;QAAAc,QAAA,EAAKE,QAAQ,CAACC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxBrB,OAAA;QAAAc,QAAA,EAAIE,QAAQ,CAACM;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BrB,OAAA;QAAAc,QAAA,GAAG,GAAC,EAACE,QAAQ,CAACO,KAAK;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBrB,OAAA;QACEwB,GAAG,EAAER,QAAQ,CAACS,KAAM,CAAC;QAAA;QACrBC,GAAG,EAAEV,QAAQ,CAACC,IAAK;QACnBU,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAQ,CAAE,CAAC;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC;IAAA,GARML,QAAQ,CAACe,EAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAShB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhCID,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAkClB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}